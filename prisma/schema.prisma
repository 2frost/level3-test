// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// userId (PK)	INTEGER	NOT NULL	AUTO_INCREMENT 
// email	STRING	NOT NULL	
// password	STRING	NOT NULL	
// createdAt	DATETIME	NOT NULL	현재 시간
// updatedAt	DATETIME	NOT NULL	현재 시간

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  UserInfos UserInfos? // 사용자(Users) 테이블과 사용자 정보(UserInfos) 테이블이 1:1 관계를 맺습니다.
  Posts     Posts[] // 사용자(Users) 테이블과 게시글(Posts) 테이블이 1:N 관계를 맺습니다.
  Comments  Comments[] // 사용자(Users) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.

  @@map("Users")
}
// userInfoId (PK)	INTEGER	NOT NULL	AUTO_INCREMENT
// name	STRING	NOT NULL	
// age	INTEGER	NULL	
// gender	STRING	NOT NULL	
// profileImage	STRING	NULL	
// createdAt	DATETIME	NOT NULL	현재 시간
// updatedAt	DATETIME	NOT NULL	현재 시간

model UserInfos {
  userInfoId   Int      @id @default(autoincrement()) @map("userInfoId")
  UserId       Int      @unique @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  name         String   @map("name")
  age          Int?     @map("age")
  gender       String   @map("gender")
  profileImage String?  @map("profileImage")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

// postId (PK)	INTEGER	NOT NULL	AUTO_INCREMENT
// title	STRING	NOT NULL	
// content	TEXT	NOT NULL	
// createdAt	DATETIME	NOT NULL	현재 시간
// updatedAt	DATETIME	NOT NULL	현재 시간

model Posts {
  postId    Int      @id @default(autoincrement()) @map("postId")
  UserId    Int      @map("UserId") // *** 사용자(Users) 테이블을 참조하는 외래키
  title     String   @map("title")
  content   String   @map("content") @db.Text // 프리즈마에서 텍스트라는 타입을 쓰기위해서는 @db.Text로 사용해야함 데이터베이스에서 그래야변경
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

// 1개의 게시글에서 여러개의 댓글을 작성할수있도록 설정

   // Users 테이블과 관계를 설정합니다.
User     Users      @relation(fields: [UserId], references: [userId], onDelete: Cascade)
Comments Comments[] 

  @@map("Posts")
}


// commentId (PK)	INTEGER	NOT NULL	AUTO_INCREMENT
// content	STRING	NOT NULL	
// createdAt	DATETIME	NOT NULL	현재 시간
// updatedAt	DATETIME	NOT NULL	현재 시간

model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  PostId    Int      @map("PostId") // 게시글(Posts) 테이블을 참조하는 외래키
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Posts 테이블과 관계를 설정합니다.
  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  // Users 테이블과 관계를 설정합니다.
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Comments")
}